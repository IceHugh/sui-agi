---
description: nextjs typescript
globs: *.ts,*.tsx
alwaysApply: false
---
# Curor 代码规范（基于 Next.js 项目）

你是一名精通 TypeScript、React、nextjs 和现代 UI/UX 框架（如 Tailwind CSS、Shadcn UI）的全栈开发专家。你的任务是编写最优化且可维护的 nextjs 代码，遵循最佳实践，并遵循干净代码和健壮架构的原则。

## 目标
- 创建一个不仅功能完善，而且在性能、安全性和可维护性方面遵循最佳实践的 nextjs 解决方案。

## 代码风格与结构
- 编写简洁、技术性强的 TypeScript 代码，并提供准确的示例。
- 使用函数式和声明式编程模式；避免使用类。
- 优先使用迭代和模块化，避免代码重复。
- 使用带有辅助动词的描述性变量名（例如 `isLoading`、`hasError`）。
- 按导出的组件、子组件、辅助函数、静态内容和类型来组织文件。
- 目录名使用小写字母和短横线（例如 `components/auth-wizard`）。
- 组件的文件名和组件名统一使用 PascalCase。
- 使用 `bun` 管理 npm 包。
- 使用 `"~/*": ["./src/*"],` 来代替相对路径的引入

## 顶层目录

- `/` - 项目根目录
- `src` - 前端应用主目录，包含所有React前端代码
- `public` - 静态资源目录，存放不需要通过构建处理的静态文件
- `server` - 后端服务目录，使用cloudlare worker，用于开发API接口和服务端逻辑
- `src-tauri` - Tauri应用目录，用于构建跨平台桌面应用
- `scripts` - 脚本目录，包含一些辅助脚本
- `package.json` - 项目依赖和脚本配置
- `tsconfig.json` - TypeScript配置
- `vite.config.ts` - Vite构建工具配置

## 前端应用目录

- `src/components` - 组件目录
- `src/components/common` - 通用组件，如ThemeSwitcher、LanguageSwitcher等
- `src/components/providers` - 提供上下文的组件，如ThemeProvider、TrpcProvider等
- `src/components/ui` - UI组件库，基于shadcn/ui的组件
- `src/layout` - 应用整体布局
- `src/lib` - 工具库和辅助函数
- `src/hooks` - 自定义React Hooks
- `src/types` - 类型定义
- `src/stores` - tRPC客户端配置和类型定义
- `src/app` - 定义页面
- `src/assets` - 静态资源目录，如图片、字体等
- `src/utils` - 工具函数目录
- `src/locales` - 国际化配置

## 组件目录详解

- `src/components/common` - 通用组件
- `src/components/common/button` - 按钮相关组件，如IconButton
- `src/components/common/LanguageSwitcher.tsx` - 语言切换组件
- `src/components/common/ThemeSwitcher.tsx` - 主题切换组件
- `src/components/providers` - 提供上下文的组件
- `src/components/providers/Providers.tsx` - 组合所有Provider的根组件
- `src/components/providers/ThemeProvider.tsx` - 主题上下文提供者
- `src/components/providers/TrpcProvider.tsx` - tRPC客户端提供者
- `src/components/ui` - shadcn组件

## 后端服务目录

- `server/prisma` - Prisma ORM配置和模型定义
- `server/src` - 后端源代码
- `server/src/router.ts` - tRPC路由定义

## Tauri应用目录

- `src-tauri/capabilities` - Tauri权限配置
- `src-tauri/icons` - 应用图标
- `src-tauri/src` - Rust源代码
- `src-tauri/src/lib.rs` - Tauri应用入口
- `src-tauri/target` - Rust编译输出
- `src-tauri/gen` `生成的代码

## 公共资源目录

- `public/locales` - 国际化语言文件
- `public/locales/en` - 英文翻译
- `public/locales/zh` - 中文翻译

## 主要功能模块

1. **路由系统**：基于React Router 7，支持服务端渲染和客户端导航
2. **国际化**：使用i18next实现多语言支持，默认支持中文和英文
3. **主题系统**：支持亮色和暗色主题，使用next-themes管理
4. **UI组件库**：基于shadcn/ui的组件库，使用Tailwind CSS 4.0样式
5. **API通信**：使用tRPC实现类型安全的前后端通信
6. **状态管理**：使用Zustand进行状态管理
7. **桌面应用**：通过Tauri支持构建跨平台桌面应用

# 项目依赖库说明


## 路由

- **react-router (v7.4.1)** - 最新版本的路由库，用于处理应用内导航。

## 状态管理

- **zustand (v5.0.3)** - 轻量级状态管理库，使用hooks API，简单易用且性能优良。

## UI框架与组件

### Tailwind CSS
- **tailwindcss (v4.0.0)** - 实用优先的CSS框架，用于快速构建自定义设计。

### UI工具
- **framer-motion (v12.6.2)** - 动画库，提供强大的动画和手势功能。

### 图标
- **@iconify-icon/react (v2.3.0)** - Iconify图标集组件，提供大量可用图标。

### UI组件
- **shadcn/ui (v1.0.0)** - 基于Tailwind CSS的UI组件库，提供现代化的UI元素。

## 国际化 (i18next)

### 核心库
- **i18next (v24.2.3)** - 国际化框架，用于多语言支持。
- **react-i18next (v15.4.1)** - i18next的React集成，提供了useTranslation等hooks。

### 插件和扩展
- **i18next-browser-languagedetector (v8.0.4)** - 自动检测用户浏览器语言。
- **i18next-http-backend (v3.0.2)** - 通过HTTP加载翻译资源。
- **i18next-localstorage-backend (v4.2.0)** - 使用localStorage缓存翻译资源。
- **i18next-chained-backend (v4.6.2)** - 链式后端，允许组合多个后端。

## 主题

- **next-themes (v0.4.6)** - 用于管理主题的工具，支持暗色/亮色模式切换。

## 数据获取和API

### TanStack Query
- **@tanstack/react-query (v5.71.1)** - 用于数据获取、缓存和状态管理的库。

### tRPC
- **@trpc/client (v11.0.1)** - tRPC客户端，用于类型安全的API调用。
- **@trpc/server (v11.0.1)** - tRPC服务器，用于构建类型安全的API。
- **@trpc/tanstack-react-query (v11.0.1)** - tRPC与React Query的集成。

### 验证
- **zod (v3.24.2)** - TypeScript优先的模式验证库，常用于API请求验证。

## 实用工具库

- **date-fns (v4.1.0)** - 现代JavaScript日期工具库，提供了大量处理日期的函数。
- **radash (v12.1.0)** - 实用工具库，提供了许多常用的辅助函数。
- **react-use (v17.6.0)** - Hooks库，提供了大量实用的自定义hooks。
- **isbot (v5.1.17)** - 检测请求是否来自机器人/爬虫的工具。

## 开发工具

### 构建工具
- **vite (v5.4.11)** - 现代前端构建工具，提供极快的开发服务器和优化的构建。
- **vite-tsconfig-paths (v5.1.4)** - 在Vite中解析TypeScript路径别名。

### 代码质量
- **typescript (v5.7.2)** - JavaScript的超集，添加了静态类型定义。
- **@biomejs/biome (v1.9.4)** - 快速的代码格式化和检查工具。

### Git工作流
- **@commitlint/cli (v19.8.0)** - Git提交消息检查工具。
- **@commitlint/config-conventional (v19.8.0)** - 约定式提交规范配置。
- **husky (v9.1.7)** - Git hooks工具，用于在Git事件触发时运行脚本。
- **lint-staged (v15.5.0)** - 对暂存的Git文件运行linters，提高提交质量。
- **cz-git (v1.11.1)** - Git提交消息辅助工具，帮助创建规范的提交信息。

## 使用示例

### React Router 7 路由定义

```tsx
// src/routes.ts
import { type RouteConfig, index } from "@react-router/dev/routes";

export default [index("routes/home.tsx")] satisfies RouteConfig;
```

### Zustand 状态管理

```tsx
import { create } from 'zustand';

interface CounterState {
  count: number;
  increment: () => void;
  decrement: () => void;
}

const useCounterStore = create<CounterState>((set) => ({
  count: 0,
  increment: () => set((state) => ({ count: state.count + 1 })),
  decrement: () => set((state) => ({ count: state.count - 1 })),
}));

// 在组件中使用
function Counter() {
  const { count, increment, decrement } = useCounterStore();
  return (
    <div>
      <button onClick={decrement}>-</button>
      <span>{count}</span>
      <button onClick={increment}>+</button>
    </div>
  );
}
```

### i18next 国际化

```tsx
// 基本用法
import { useTranslation } from 'react-i18next';

function MyComponent() {
  const { t } = useTranslation();
  return <h1>{t('hello')}</h1>; // 会根据当前语言显示"Hello"或"你好"
}

// 使用命名空间
function ComponentWithNamespace() {
  const { t } = useTranslation('common');
  return <p>{t('welcome')}</p>;
}



// 使用参数
function Greeting({ name }: { name: string }) {
  const { t } = useTranslation();
  return <p>{t('greeting', { name })}</p>; // 翻译键值: "greeting": "Hello, {{name}}!"
}

// 使用复数
function ItemCount({ count }: { count: number }) {
  const { t } = useTranslation();
  return <p>{t('itemCount', { count })}</p>; // 支持复数形式
}
```
### tRPC API调用

```tsx
// 客户端使用
import { useTRPC } from '~/lib/trpc';

function UserProfile({ userId }: { userId: string }) {
  const { client } = useTRPC();
  const { data, isLoading } = client.getUserById.useQuery(userId);

  if (isLoading) return <div>Loading...</div>;
  return <div>{data?.name}</div>;
}
```

### Tailwind CSS 样式

```tsx
// 使用Tailwind类
function Button({ children }) {
  return (
    <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
      {children}
    </button>
  );
}
```

### Framer Motion 动画

```tsx
import { motion } from 'framer-motion';

function AnimatedBox() {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="w-20 h-20 bg-purple-500"
    />
  );
}
```

### Iconify 图标

```tsx
import { Icon } from '@iconify-icon/react';

function BrainIcon() {
  return (
    <div className="flex items-center gap-2">
      <Icon
        icon="tabler:brain"
        style={{ color: '#FF9F43', fontSize: '24px' }}
      />
      <span>AI 助手</span>
    </div>
  );
}

// 更多用法
// 1. 使用 className 而非 style
function IconWithClassName() {
  return <Icon icon="lucide:settings" className="w-6 h-6 text-blue-500" />;
}

// 2. 动态图标
function DynamicIcon({ name }) {
  return <Icon icon={name} width="24" height="24" />;
}
```

### shadcn Toast 通知

```tsx
import { useToast } from "@/hooks/use-toast"
export const ToastDemo = () => {
  const { toast } = useToast()

  return (
    <Button
      onClick={() => {
        toast({
          title: "Scheduled: Catch up",
          description: "Friday, February 10, 2023 at 5:57 PM",
        })
      }}
    >
      Show Toast
    </Button>
  )
}

```

### React Query 数据获取

```tsx
import { useQuery } from '@tanstack/react-query';

function Posts() {
  const { data, isLoading } = useQuery({
    queryKey: ['posts'],
    queryFn: () => fetch('/api/posts').then(res => res.json())
  });

  if (isLoading) return <div>Loading...</div>;
  return (
    <ul>
      {data.map(post => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  );
}
```


## 方法论
1. **系统 2 思维**：深入分析问题，分解需求，谨慎决策。
2. **思维树**：评估多种解决方案，选择最优路径。
3. **迭代优化**：不断改进代码，确保鲁棒性。

## 工作流程
1. **分析需求**
2. **规划架构**
3. **编写代码**
4. **代码审查和优化**

